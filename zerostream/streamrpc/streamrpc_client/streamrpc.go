// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.2
// Source: streamrpc.proto

package streamrpc_client

import (
	"context"

	"zerostream/streamrpc/streamrpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Request        = streamrpc.Request
	Response       = streamrpc.Response
	StreamPoint    = streamrpc.StreamPoint
	StreamRequest  = streamrpc.StreamRequest
	StreamResponse = streamrpc.StreamResponse

	Streamrpc interface {
		Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
		List(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (streamrpc.Streamrpc_ListClient, error)
		Record(ctx context.Context, opts ...grpc.CallOption) (streamrpc.Streamrpc_RecordClient, error)
		Route(ctx context.Context, opts ...grpc.CallOption) (streamrpc.Streamrpc_RouteClient, error)
	}

	defaultStreamrpc struct {
		cli zrpc.Client
	}
)

func NewStreamrpc(cli zrpc.Client) Streamrpc {
	return &defaultStreamrpc{
		cli: cli,
	}
}

func (m *defaultStreamrpc) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	client := streamrpc.NewStreamrpcClient(m.cli.Conn())
	return client.Ping(ctx, in, opts...)
}

func (m *defaultStreamrpc) List(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (streamrpc.Streamrpc_ListClient, error) {
	client := streamrpc.NewStreamrpcClient(m.cli.Conn())
	return client.List(ctx, in, opts...)
}

func (m *defaultStreamrpc) Record(ctx context.Context, opts ...grpc.CallOption) (streamrpc.Streamrpc_RecordClient, error) {
	client := streamrpc.NewStreamrpcClient(m.cli.Conn())
	return client.Record(ctx, opts...)
}

func (m *defaultStreamrpc) Route(ctx context.Context, opts ...grpc.CallOption) (streamrpc.Streamrpc_RouteClient, error) {
	client := streamrpc.NewStreamrpcClient(m.cli.Conn())
	return client.Route(ctx, opts...)
}
